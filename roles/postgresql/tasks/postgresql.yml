---

# Some prerequisites (client etc)
- name: Add PostgreSQL GPG apt Key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add Docker Repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ansible_distribution_release}}-pgdg main

- name: Install Postgresql development lib, needed for pip module psycopg2
  apt:
    name: libpq-dev
    state: latest 
    update_cache: false     

- name: Install PostgreSQL client packages
  apt:
    name: "{{ item }}"
    state: latest 
    update_cache: false
  loop:
    - postgresql-client-common
    - postgresql-client-12

- name: Install python3-psycopg2 pip
  pip:
    name: psycopg2
    state: present

########################################
# Create volume for postgresql data
# Create postgres application container

# If the volume should be recreated, stop docker postgresql container

- name: "Stop docker container {{ postgresql_docker_container_name }}"
  docker_container:
    name: "{{ postgresql_docker_container_name }}"
    image: "{{ postgresql_docker_image }}"
    state: absent  # Remove container
    keep_volumes: false
  when: recreate_postgresql_volume == "always"

# (Re)Create the volumes
- name: Create volumes for postgres
  docker_volume:
    name: "{{ item }}"
    state: present
    driver: local
    recreate: "{{ recreate_postgresql_volume }}"
  loop:
    - "{{ postgresql_data_volume_name }}"

- name: Get path to data volume for postgresql container 
  docker_volume_info:
    name: "{{ postgresql_data_volume_name }}"
  register: pgdata_volume_data

- set_fact:
    # path to postgresql data directory on host
    pgdata_path_host: "{{ pgdata_volume_data.volume.Mountpoint }}"

# Create bridge network
- import_tasks: ../../common/tasks/create-bridge-network.yml

# Get the specified image for Postgresql
- name: Get postgresql docker image
  docker_image: 
    name: "{{ postgresql_docker_image }}"
    tag: "{{ postgresql_docker_image_tag }}"
    source: pull

# Create / start the container. Recreate is conditional
- name: Create postgresql docker container
  docker_container:
    name: "{{ postgresql_docker_container_name }}"
    image: "{{ postgresql_docker_image }}"
    state: started
    recreate: "{{ recreate_postgresql_container }}"
    memory: "{{ postgresql_max_memory }}"
    env:
      #LDAP_ORGANISATION: "{{ openldap_organization_name_input }}"    
    mounts: 
      - source: "{{ postgresql_data_volume_name }}"
        target: "{{ postgresql_data_volume_container_mount_point }}"
        type: volume
    hostname: "{{ postgresql_docker_container_hostname }}"
    exposed_ports: "{{ postgresql_docker_container_exposes_ports }}"
    published_ports: "{{ postgresql_docker_container_publish_ports }}"
    network_mode: bridge
    networks:
      - name: "InternalNet"
        aliases: "{{ postgresql_docker_container_hostname }}"
    networks_cli_compatible: yes    
    user: "root" # should be changed
    restart_policy: always
  register: postgresql_inspect_data

- name: "Wait for PostgreSQL @ localhost : {{ postgresql_docker_container_exposes_ports[0] }} to respond"
  wait_for:
    host: "localhost"
    port: "{{ postgresql_docker_container_exposes_ports[0] }}"
    state: drained
    connect_timeout: 1
    timeout: 30
  register: postgres_responding
  until: postgres_responding is success
  retries: 10

- name: Copy internal CA certificate to data volume directory
  copy:
    dest: "{{ pgdata_path_host }}"
    src: "{{ item }}"
    force: yes
    mode: u=r,g=,o=
  become: true
  become_user: root
  loop:
    - "{{ cacerts_dir }}/{{ internal_cacerts_ca_file }}"
    - "{{ certs_dir }}/{{ internal_certs_cert_file }}"

- name: "Copy internal CA certificate to /etc/ssl/certs/ca-certificates.crt to enable ldaptls for ldap auth method."
  shell: 
    cmd: "{{ item.cmd }}" 
  loop: 
    - cmd: "docker exec {{ postgresql_docker_container_name }} cp {{ postgresql_data_volume_container_mount_point }}/{{ internal_cacerts_ca_file }} /etc/ssl/certs/ca-certificates.crt"
    - cmd: "docker exec {{ postgresql_docker_container_name }} chmod 644 /etc/ssl/certs/ca-certificates.crt"
    
- name: "Load ldap vars from file"
  include_vars:
    file: "{{ openldap_info_file }}"
    name: "ldap_info"

- name: "ldap info:"
  debug: 
    msg: "{{ ldap_info }}"

- name: Remove host - all - all entry from pg_hba.conf.
  postgresql_pg_hba:
    dest: "{{ pgdata_path_host }}/pg_hba.conf"
    contype: host
    databases: all
    users: all
    source: "{{ item.source }}"
    state: absent
    create: true
  loop:
    - source: "127.0.0.1/32"
    - source: "::1/128"

- name: Add ldap auth method to pg_hba.conf for host - all - all.
  postgresql_pg_hba:
    dest: "{{ pgdata_path_host }}/pg_hba.conf"
    contype: host
    users: all
    databases: all
    source: 0.0.0.0/0
    method: ldap
    options: "ldapserver=\"{{ ldap_info.ldap_host }}\" ldapprefix=\"cn=\" ldapsuffix=\",{{ ldap_info.ldap_dc }}\" ldaptls=1"
    state: present
    create: true

- name: "Restart docker container {{ postgresql_docker_container_name }}"
  docker_container:
    name: "{{ postgresql_docker_container_name }}"
    state: started
    restart: true

#- name: Create Postgresql user
#  block:
#  - name: "Create Postgresql {{ db_postgres_dbuser }} account"
#    postgresql_user:
#      encrypted: true
#      login_host: "{{ postgres_ip }}"
#      login_user: "postgres"
#      db: "{{ db_postgres_dbname }}"
#      name: "{{ db_postgres_dbuser }}"
#      password: "{{ db_postgres_password }}"
#
#  when: postgres_responding is success
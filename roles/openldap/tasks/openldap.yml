---

# Some prerequisites
- name: Install python3-ldap
  apt:
    name: "{{ item }}"
    state: latest 
    update_cache: false 
  loop:
    - python3-ldap

########################################
# Create data volumes for OpenLDAP
# Create OpenLDAP application container

# If the volume should be recreated, stop docker openldap container

- name: "Stop docker container {{ openldap_docker_container_name }}"
  docker_container:
    name: "{{ openldap_docker_container_name }}"
    image: "{{ openldap_docker_image }}"
    state: absent  # Remove container
    keep_volumes: false
  when: recreate_openldap_volumes == "always"

# (Re)Create the data volume
- name: Create volume for openldap data
  docker_volume:
    name: "{{ item }}"
    state: present
    driver: local
    recreate: "{{ recreate_openldap_volumes }}"
  loop: 
   - "{{ openldap_data_volume_name }}"
   - "{{ openldap_config_volume_name }}"
    
# Get the specified image for OpenLDAP
- name: get openldap docker image
  docker_image: 
    name: "{{ openldap_docker_image }}"
    tag: "{{ openldap_docker_image_tag }}"
    source: pull

# Create / start the container. Recreate is conditional
- name: create openldap docker container
  docker_container:
    name: "{{ openldap_docker_container_name }}"
    image: "{{ openldap_docker_image }}"
    state: started
    recreate: "{{ recreate_openldap_container }}"
    memory: "{{ openldap_max_memory }}"
    mounts: 
      - source: "{{ openldap_data_volume_name }}"
        target: "{{ openldap_data_volume_container_mount_point }}"
        type: volume
      - source: "{{ openldap_config_volume_name }}"
        target: "{{ openldap_config_volume_container_mount_point }}"
        type: volume
    hostname: "{{ openldap_docker_container_hostname }}"
    exposed_ports: "{{ openldap_docker_container_exposes_ports }}"
    published_ports: "{{ openldap_docker_container_publish_ports }}"
    user: "root" # should be changed
    restart_policy: always
  register: openldap_inspect_data

- name: Store IP of Postgresql server
  set_fact: 
    openldap_ip: "{{ openldap_inspect_data['ansible_facts']['docker_container']['NetworkSettings']['IPAddress'] }}"

- name: "Wait for OpenLDAP @ {{ openldap_ip }} : {{ openldap_docker_container_exposes_ports[0] }} to respond"
  wait_for:
    host: "{{ openldap_ip }}"
    port: "{{ openldap_docker_container_exposes_ports[0] }}"
    state: drained
    connect_timeout: 1
    timeout: 30
  register: openldap_responding
  until: openldap_responding is success
  retries: 10

##################################
# Configuration
##################################

# create config directory in ldap config volume
# Admin password

# create

# Get path to config volume for openldap container 
- name:
  docker_volume_info:
    name: "{{ openldap_config_volume_name }}"
  register: config_volume_data

- name: "Create diretcory for custom config ldif filesystem ({{ config_volume_patch }}/custom-config/)"
  file:
    state: directory
    path: "{{ config_volume_patch }}/custom-config/"
  vars:
    config_volume_patch: "{{ config_volume_data.volume.Mountpoint }}"

# sudo docker exec openldap slappasswd -s "1234" returns the hashed password.
- name: Generate password for administrator user
  shell: 
    cmd: "docker exec openldap slappasswd -s '{{ openldap_admin_password }}'"
  register: hashed_password

- name: Set up an administrator user
  ldap_attr:
    server_uri: ldap://localhost/
    bind_dn: cn=admin,dc=example,dc=com
    dn: olcDatabase={1}hdb,cn=config
    name: "{{ item.key }}"
    values: "{{ item.value }}"
    state: exact
  with_dict:
    olcRootDN: "cn=admin, {{ openldap_dc_string }}"
    olcRootPW: "{{ hashed_password }}"
    olcSuffix: "{{ openldap_dc_string }}"


#- name: Generate ldif file to change administrator suffix, roodDN and password, 
#  template:
#    src: templates/administrator-settings.j2
#    dest: "{{ certkeys_vault_location }}"
#    owner: "{{ current_user }}"
#    mode: u=rw,g=,o=
#  vars:
#    hashed_password: "{{ hashed_password }}"
#    suffix: "{{ openldap_dc_string }}"
#    rootDN: "cn=admin, {{ openldap_dc_string }}"
#    file_path: "{{ config_volume_patch }}/custom-config/administrator-settings.ldif"
#  loop:

#- name: copy ldif to 
#    src 
#  vars:

- name: Make sure we have an admin user
  ldap_entry:
    dn: cn=admin,dc=example,dc=com
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      description: An LDAP administrator
      userPassword: "{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND"

- name: Make sure we have a parent entry for users
  ldap_entry:
    dn: ou=users,dc=example,dc=com
    objectClass: organizationalUnit

- name: Make sure we have an admin user
  ldap_entry:
    dn: cn=admin,dc=example,dc=com
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      description: An LDAP administrator
      userPassword: "{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND"

- name: Get rid of an old entry
  ldap_entry:
    dn: ou=stuff,dc=example,dc=com
    state: absent
    server_uri: ldap://localhost/
    bind_dn: cn=admin,dc=example,dc=com
    bind_pw: password


# Get the specified image for OpenLDAP admin 
#- name: Get phpldapadmin docker image
#  docker_image: 
#    name: "{{ openldap_admin_docker_image }}"
#    tag: "{{ openldap_admin_docker_image_tag }}"
#    source: pull

#- name "Install PHP LDAP Admin"
#osixia/phpldapadmin

#- name: Create OpenLDAP entries
#  block:
#  - name: "Create OpenLDAP {{ openldap_postgres_dbuser }} account"
#    ldap_entry:
#      state: present
#      server_uri: "{{ openldap_ip }}"
#      dn: ou=users,dc=nnworks,dc=com
#      objectClass: organizationalUnit
#
#  when: openldap_responding is success
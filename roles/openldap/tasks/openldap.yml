---

- name: Check domain name
  fail:
    msg: "Please give a valid domain name"
  when: openldap_domain_input is not match(".*\..*")

# Some prerequisites
- name: Install python3-ldap
  apt:
    name: "{{ item }}"
    state: latest 
    update_cache: false 
  loop:
    - python3-ldap

########################################
# Create data volumes for OpenLDAP
# Create OpenLDAP application container

# If the volume should be recreated, stop docker openldap container

- name: "Stop docker container {{ openldap_docker_container_name }}"
  docker_container:
    name: "{{ openldap_docker_container_name }}"
    #image: "{{ openldap_docker_image }}"
    state: absent  # Remove container
    keep_volumes: false
  when: recreate_openldap_volumes == "always"

# (Re)Create the data volume
- name: Create volume for openldap data
  docker_volume:
    name: "{{ item }}"
    state: present
    driver: local
    recreate: "{{ recreate_openldap_volumes }}"
  loop: 
   - "{{ openldap_data_volume_name }}"
   - "{{ openldap_config_volume_name }}"
    
# Get the specified image for OpenLDAP
- name: get openldap docker image
  docker_image: 
    name: "{{ openldap_docker_image }}"
    tag: "{{ openldap_docker_image_tag }}"
    source: pull

# Create / start the container. Recreate is conditional
- name: create openldap docker container
  docker_container:
    name: "{{ openldap_docker_container_name }}"
    image: "{{ openldap_docker_image }}"
    state: started
    recreate: "{{ recreate_openldap_container }}"
    memory: "{{ openldap_max_memory }}"
    privileged: false
    user: root
    env:
      LDAP_ORGANISATION: "{{ openldap_organization_name_input }}"
      LDAP_DOMAIN: "{{ openldap_domain_input }}"
      LDAP_BASE_DN: "{{ openldap_domain_input }}"
      LDAP_BACKEND: "{{ openldap_backend_db }}"
      #LDAP_TLS: "true"
      #LDAP_TLS_CRT_FILENAME: "mycrt.crt"
      #LDAP_TLS_KEY_FILENAME: "{{ openldap_config_volume_name }}mycrt.priv.key"
      #LDAP_TLS_DH_PARAM_FILENAME: "my-dhparam.pem"
      #LDAP_TLS_CA_CRT_FILENAME: "myca.crt"
      #LDAP_TLS_ENFORCE: "true"
      #LDAP_TLS_CIPHER_SUITE: "SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC"
      #LDAP_TLS_VERIFY_CLIENT: "demand"
    mounts: 
      - source: "{{ openldap_data_volume_name }}"
        target: "{{ openldap_data_volume_container_mount_point }}"
        type: volume
      - source: "{{ openldap_config_volume_name }}"
        target: "{{ openldap_config_volume_container_mount_point }}"
        type: volume
    hostname: "{{ openldap_docker_container_hostname }}"
    exposed_ports: "{{ openldap_docker_container_exposes_ports }}"
    published_ports: "{{ openldap_docker_container_publish_ports }}"
    restart_policy: always
  register: openldap_inspect_data

- name: Get path to config volume for openldap container 
  docker_volume_info:
    name: "{{ openldap_config_volume_name }}"
  register: config_volume_data

- set_fact:
    # ip of openldap container
    openldap_ip: "{{ openldap_inspect_data['ansible_facts']['docker_container']['NetworkSettings']['IPAddress'] }}"
    # path to custom configuration directory on host
    custom_config_path_host: "{{ config_volume_data.volume.Mountpoint }}/custom-config"
    # path to custom configuration directory in container
    custom_config_path_container: "{{ openldap_config_volume_container_mount_point }}/custom-config"
    
    install_domain_dc: "dc={{ openldap_domain_input.split('.') | join(',dc=') }}"

- name: Wait for OpenLDAP container to be fully started
  docker_container_info:
    name: "{{ openldap_docker_container_name }}"
  register: result
  until: result.container.State.Status == 'running'
  retries: 10

- name: "Wait for OpenLDAP ldapi:// to be present"
  shell: "docker exec openldap ldapsearch -H ldapi:// -LLL -Q -Y EXTERNAL -b cn=admin,{{ install_domain_dc }}"
  become: true
  become_user: root
  register: ldapi_responding
  until: ldapi_responding is success
  retries: 10

##################################
# Configuration
##################################


# create config directory in ldap config volume
# Admin password

# Create hash of the password.
- name: Generate password for administrator user
  shell: 
    cmd: "docker exec openldap slappasswd -s '{{ openldap_admin_password }}'"
  register: openldap_admin_password_hashed

- name: search for rootDN dn and configDIT dn
  shell: |
      docker exec --interactive {{ openldap_docker_container_name }} ldapsearch -H ldapi:// -LLL -Q -Y EXTERNAL -b "cn=config" "(olcRootDN=*)" dn olcRootDN olcRootPW
  become: true
  become_user: root
  register: result

- set_fact:
    rootDN_dn: "{{ result.stdout_lines | select('match','^dn: .*(mdb,).*') | first }}"
    configDIT_dn: "{{ result.stdout_lines | select('match','^dn: .*(config,).*') | first }}"
    normalDIT_dn: "{{ result.stdout_lines | select('match','^dn: .*(config,).*') | first }}"
    admin_dn: "cn=admin,{{ install_domain_dc }}" 
    openldap_admin_password_hashed: "{{ openldap_admin_password_hashed.stdout }}"

# Change default settings. Keep the empty lines between the ldiff input blocks!
- name: Change RootDN admin password, olcSuffix and olcRootDN
  shell: |
      docker exec --interactive {{ openldap_docker_container_name }} ldapmodify -H ldapi:// -Y EXTERNAL <<EOF
      {{ rootDN_dn }}
      changetype: modify
      replace: olcRootPW
      olcRootPW: {{ openldap_admin_password_hashed }}
      EOF
  become: true
  become_user: root

- name: Change Config DIT admin password
  shell: |
      docker exec --interactive {{ openldap_docker_container_name }} ldapmodify -H ldapi:// -Y EXTERNAL <<EOF
      {{ configDIT_dn }}
      changetype: modify
      replace: olcRootPW
      olcRootPW: {{ openldap_admin_password_hashed }}
      EOF
  become: true
  become_user: root

# Change default settings. Keep the empty lines between the ldiff input blocks!
- name: Change Normal DIT admin password
  shell: |
      docker exec --interactive {{ openldap_docker_container_name }} ldapmodify -H ldap://localhost -x -D {{ admin_dn }} -w {{ openldap_admin_password }} <<EOF
      dn: {{ admin_dn }}
      changetype: modify
      replace: userPassword
      userPassword: {{ openldap_admin_password_hashed }}
      EOF
  become: true
  become_user: root


- name: "Create directory for custom config ldif filesystem ({{ custom_config_path_host }})"
  file:
    state: directory
    path: "{{ custom_config_path_host }}"

- name: Copy private key, custom certificates and dhparam.pem to custom config directory on host
  copy:
    dest: "{{ custom_config_path_host }}"
    src: "{{ item }}"
    force: yes
    mode: '0400'
  become: true
  become_user: root
  loop:
    - "{{ certs_dir }}/{{ internal_certs_cert_file }}"
    - "{{ internal_cert_priv_key_file }}"

- name: change owner of private key, certificate and dhparams to openldap
  shell: "docker container exec {{ openldap_docker_container_name }} chown openldap:openldap {{ item }}"
  loop:
    - "{{ custom_config_path_container }}/{{ internal_certs_cert_file }}"
    - "{{ custom_config_path_container }}/{{ internal_cert_priv_key_file | basename }}"

- name: debugging
  debug:
    msg: |
      docker exec --interactive {{ openldap_docker_container_name }} ldapmodify -H ldapi:// -Y EXTERNAL <<EOF
      dn: cn=config
      changetype: modify
      replace: olcTLSCertificateKeyFile
      olcTLSCertificateKeyFile: "{{ custom_config_path_container }}/{{ internal_cert_priv_key_file | basename }}"

      dn: cn=config
      changetype: modify
      replace: olcTLSCertificateFile
      olcTLSCertificateFile: "{{ custom_config_path_container }}/{{ internal_certs_cert_file }}"
      EOF

# configure TLS. Keep the empty lines between the ldiff input blocks! And first change the key, then the cert, else error 80 may occur!
# - name: Configure TLS
#   shell: |
#     docker exec --interactive {{ openldap_docker_container_name }} ldapmodify -H ldapi:// -Y EXTERNAL <<EOF

#     dn: cn=config
#     changetype: modify
#     replace: olcTLSCertificateFile
#     olcTLSCertificateFile: "/etc/ldap/slapd.d/custom-config/internal-cert.crt"

#     dn: cn=config
#     changetype: modify
#     replace: olcTLSCertificateKeyFile
#     olcTLSCertificateKeyFile: "/etc/ldap/slapd.d/custom-config/develop-int-cert-key-priv.pem"
#     EOF
#       # dn: cn=config
#       # changetype: modify
#       # replace: olcTLSCertificateFile
#       # olcTLSCertificateFile: {{ custom_config_path_container }}/{{ internal_certs_cert_file }}

#       # dn: cn=config
#       # changetype: modify
#       # replace: olcTLSCertificateKeyFile
#       # olcTLSCertificateKeyFile: {{ custom_config_path_container }}/{{ internal_cert_priv_key_file | basename }}
#       # EOF
#   become: true
#   become_user: root




# - name: "Restart docker container {{ openldap_docker_container_name }}"
#   docker_container:
#     name: "{{ openldap_docker_container_name }}"
#     state: started
#     restart: true


# - name: Set up an administrator user
#   ldap_attr:
#     server_uri: ldap://localhost/
#     bind_dn: cn=admin,dc=example,dc=com
#     dn: olcDatabase={1}hdb,cn=config
#     name: "{{ item.key }}"
#     values: "{{ item.value }}"
#     state: exact
#   with_dict:
#     olcRootDN: "cn=admin, {{ openldap_dc_string }}"
#     olcRootPW: "{{ hashed_password }}"
#     olcSuffix: "{{ openldap_dc_string }}"


#- name: Generate ldif file to change administrator suffix, roodDN and password, 
#  template:
#    src: templates/administrator-settings.j2
#    dest: "{{ certkeys_vault_location }}"
#    owner: "{{ current_user }}"
#    mode: u=rw,g=,o=
#  vars:
#    hashed_password: "{{ hashed_password }}"
#    suffix: "{{ openldap_dc_string }}"
#    rootDN: "cn=admin, {{ openldap_dc_string }}"
#    file_path: "{{ config_volume_path }}/custom-config/administrator-settings.ldif"
#  loop:

#- name: copy ldif to 
#    src 
#  vars:

# - name: Make sure we have an admin user
#   ldap_entry:
#     dn: cn=admin,dc=example,dc=com
#     objectClass:
#       - simpleSecurityObject
#       - organizationalRole
#     attributes:
#       description: An LDAP administrator
#       userPassword: "{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND"

# - name: Make sure we have a parent entry for users
#   ldap_entry:
#     dn: ou=users,dc=example,dc=com
#     objectClass: organizationalUnit

# - name: Make sure we have an admin user
#   ldap_entry:
#     dn: cn=admin,dc=example,dc=com
#     objectClass:
#       - simpleSecurityObject
#       - organizationalRole
#     attributes:
#       description: An LDAP administrator
#       userPassword: "{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND"

# - name: Get rid of an old entry
#   ldap_entry:
#     dn: ou=stuff,dc=example,dc=com
#     state: absent
#     server_uri: ldap://localhost/
#     bind_dn: cn=admin,dc=example,dc=com
#     bind_pw: password


# Get the specified image for OpenLDAP admin 
#- name: Get phpldapadmin docker image
#  docker_image: 
#    name: "{{ openldap_admin_docker_image }}"
#    tag: "{{ openldap_admin_docker_image_tag }}"
#    source: pull

#- name "Install PHP LDAP Admin"
#osixia/phpldapadmin

#- name: Create OpenLDAP entries
#  block:
#  - name: "Create OpenLDAP {{ openldap_postgres_dbuser }} account"
#    ldap_entry:
#      state: present
#      server_uri: "{{ openldap_ip }}"
#      dn: ou=users,dc=nnworks,dc=com
#      objectClass: organizationalUnit
#
#  when: openldap_responding is success